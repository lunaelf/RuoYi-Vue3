name: CI/CD

on:
  push:
    branches:
      - "containerize"
    tags:
      - "v*"
  pull_request:
    branches:
      - "containerize"

env:
  DOCKER_REPOSITORY_NAME: ruoyi-vue3
  FRONTEND_NAME: frontend
  FRONTEND_PORT: 3000

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_REGISTRY }}/${{ vars.DOCKER_REGISTRY_USERNAME }}/${{ env.DOCKER_REPOSITORY_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}
      - name: Login to Docker Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ vars.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # - name: Build and test
      #   uses: docker/build-push-action@v6
      #   with:
      #     target: test
      #     load: true
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          target: final
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.DOCKER_REGISTRY_PASSWORD }}" | docker login --username ${{ vars.DOCKER_REGISTRY_USERNAME }} --password-stdin ${{ secrets.DOCKER_REGISTRY }}
            docker pull ${{ secrets.DOCKER_REGISTRY }}/${{ vars.DOCKER_REGISTRY_USERNAME }}/${{ env.DOCKER_REPOSITORY_NAME }}:latest
            if [ "$(docker inspect -f '{{.State.Running}}' ${{ env.FRONTEND_NAME }})" = "true" ]; then
              docker rm -f ${{ env.FRONTEND_NAME }}
            fi
            docker run -d \
              --name ${{ env.FRONTEND_NAME }} \
              --label "traefik.http.routers.${{ env.FRONTEND_NAME }}.rule=Host(\`${{ secrets.SSH_HOST }}\`)" \
              --label "traefik.http.services.${{ env.FRONTEND_NAME }}.loadbalancer.server.port=${{ env.FRONTEND_PORT }}" \
              --network traefik-network \
              ${{ secrets.DOCKER_REGISTRY }}/${{ vars.DOCKER_REGISTRY_USERNAME }}/${{ env.DOCKER_REPOSITORY_NAME }}:latest
